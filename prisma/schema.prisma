generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String
  role       String
  department String?
  active     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Campus {
  id          String     @id @default(cuid())
  campusName  String     @map("campus_name")
  campusCode  String?    @unique @map("campus_code")
  address     String?
  totalArea   Decimal?   @map("total_area") @db.Decimal(10, 2)
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  buildings   Building[]

  @@map("campuses")
}

model Building {
  id           String   @id @default(cuid())
  campusId     String   @map("campus_id")
  buildingName String   @map("building_name")
  buildingCode String   @map("building_code")
  totalFloors  Int?     @map("total_floors")
  totalArea    Decimal? @map("total_area") @db.Decimal(10, 2)
  description  String?
  createdAt    DateTime @default(now()) @map("created_at")
  campus       Campus   @relation(fields: [campusId], references: [id])
  floors       Floor[]

  @@map("buildings")
}

model Floor {
  id         String   @id @default(cuid())
  buildingId String   @map("building_id")
  floorName  String   @map("floor_name")
  floorCode  String   @map("floor_code")
  area       Decimal? @db.Decimal(10, 2)
  roomCount  Int      @default(0) @map("room_count")
  createdAt  DateTime @default(now()) @map("created_at")
  building   Building @relation(fields: [buildingId], references: [id])
  rooms      Room[]

  @@map("floors")
}

model Room {
  id              String   @id @default(cuid())
  floorId         String   @map("floor_id")
  roomNumber      String   @unique @map("room_number")
  campusName      String   @map("campus_name")
  buildingName    String   @map("building_name")
  floorName       String   @map("floor_name")
  ownership       String?
  owner           String?
  customerNote    String?  @map("customer_note")
  otherRemarks    String?  @map("other_remarks")
  roomSizeSqm     Decimal? @map("room_size_sqm") @db.Decimal(10, 2)
  seatingCapacity Int?     @map("seating_capacity")
  roomHeight      String?  @map("room_height")
  paintColorCode  String?  @map("paint_color_code")
  roomCategory    String?  @map("room_category")
  roomType        String?  @map("room_type")
  elvIdfBdfRoom   String?  @map("elv_idf_bdf_room")
  distanceMeters  Decimal? @map("distance_meters") @db.Decimal(10, 2)
  remarks         String?
  currentStatus   String   @default("Active") @map("current_status")
  lastUpdated     DateTime @default(now()) @map("last_updated")
  createdAt       DateTime @default(now()) @map("created_at")
  createdBy       String?  @map("created_by")
  updatedBy       String?  @map("updated_by")
  floor           Floor    @relation(fields: [floorId], references: [id])

  @@map("rooms")
}

model ItAsset {
  id             String    @id @default(cuid())
  assetTag       String    @unique @map("asset_tag")
  assetType      String    @map("asset_type")
  brand          String?
  model          String?
  serialNumber   String?   @map("serial_number")
  status         String    @default("Available")
  assignedTo     String?   @map("assigned_to")
  assignedDate   DateTime? @map("assigned_date")
  location       String?
  purchaseDate   DateTime? @map("purchase_date")
  warrantyExpiry DateTime? @map("warranty_expiry")
  createdAt      DateTime  @default(now()) @map("created_at")

  @@map("it_assets")
}

model AmcSystemCategory {
  id           String      @id @default(cuid())
  categoryName String      @map("category_name")
  categoryCode String?     @unique @map("category_code")
  description  String?
  createdAt    DateTime    @default(now()) @map("created_at")
  systems      AmcSystem[]

  @@map("amc_system_categories")
}

model AmcSystem {
  id               String             @id @default(cuid())
  systemName       String             @map("system_name")
  systemCode       String?            @unique @map("system_code")
  categoryId       String?            @map("category_id")
  location         String?
  description      String?
  installationDate DateTime?          @map("installation_date") @db.Date
  warrantyExpiry   DateTime?          @map("warranty_expiry") @db.Date
  status           String             @default("Active")
  createdAt        DateTime           @default(now()) @map("created_at")
  contracts        AmcContract[]
  category         AmcSystemCategory? @relation(fields: [categoryId], references: [id])

  @@map("amc_systems")
}

model AmcContract {
  id                  String      @id @default(cuid())
  contractNumber      String      @unique @map("contract_number")
  systemId            String?     @map("system_id")
  contractorId        String?     @map("contractor_id")
  contractType        String      @map("contract_type")
  contractValue       Decimal     @map("contract_value") @db.Decimal(15, 2)
  startDate           DateTime    @map("start_date") @db.Date
  endDate             DateTime    @map("end_date") @db.Date
  slaTerms            String?     @map("sla_terms")
  responseTimeHours   Int?        @map("response_time_hours")
  resolutionTimeHours Int?        @map("resolution_time_hours")
  penaltyClause       String?     @map("penalty_clause")
  status              String      @default("Active")
  autoRenewal         Boolean     @default(false) @map("auto_renewal")
  renewalNoticeDays   Int         @default(60) @map("renewal_notice_days")
  createdBy           String?     @map("created_by")
  createdAt           DateTime    @default(now()) @map("created_at")
  contractor          Contractor? @relation(fields: [contractorId], references: [id])
  system              AmcSystem?  @relation(fields: [systemId], references: [id])

  @@map("amc_contracts")
}

model Contractor {
  id           String        @id @default(cuid())
  companyName  String        @map("company_name")
  contactName  String        @map("contact_name")
  email        String
  phone        String?
  address      String?
  status       String        @default("Active")
  createdAt    DateTime      @default(now()) @map("created_at")
  amcContracts AmcContract[]

  @@map("contractors")
}

model Project {
  id               String    @id @default(cuid())
  projectName      String    @map("project_name")
  projectType      String    @map("project_type")
  systemType       String?   @map("system_type")
  categoryType     String?   @map("category_type")
  description      String?
  startDate        DateTime? @map("start_date") @db.Date
  endDate          DateTime? @map("end_date") @db.Date
  status           String    @default("Planning")
  projectManagerId String?   @map("project_manager_id")
  createdAt        DateTime  @default(now()) @map("created_at")

  @@map("projects")
}

model LeaveApplication {
  id           String    @id @default(cuid())
  employeeId   String    @map("employee_id")
  leaveType    String    @map("leave_type")
  startDate    DateTime  @map("start_date") @db.Date
  endDate      DateTime  @map("end_date") @db.Date
  daysCount    Int       @map("days_count")
  reason       String?
  status       String    @default("Pending")
  approvedBy   String?   @map("approved_by")
  approvalDate DateTime? @map("approval_date")
  comments     String?
  createdAt    DateTime  @default(now()) @map("created_at")

  @@map("leave_applications")
}

model RoomProject {
  id              String    @id @default(cuid())
  roomId          String    @map("room_id")
  projectId       String?   @map("project_id")
  projectType     String    @map("project_type")
  description     String?
  budgetAllocated Decimal?  @map("budget_allocated") @db.Decimal(15, 2)
  actualCost      Decimal?  @map("actual_cost") @db.Decimal(15, 2)
  startDate       DateTime? @map("start_date") @db.Date
  completionDate  DateTime? @map("completion_date") @db.Date
  contractorId    String?   @map("contractor_id")
  projectStatus   String    @default("Planning") @map("project_status")
  createdBy       String?   @map("created_by")
  createdAt       DateTime  @default(now()) @map("created_at")

  @@map("room_projects")
}

model RoomVariationRequest {
  id                      String    @id @default(cuid())
  roomId                  String    @map("room_id")
  requestType             String    @map("request_type")
  description             String
  justification           String?
  estimatedCost           Decimal?  @map("estimated_cost") @db.Decimal(15, 2)
  requestedBy             String    @map("requested_by")
  requestDate             DateTime  @map("request_date") @db.Date
  priority                String    @default("Medium")
  status                  String    @default("Submitted") @map("status")
  assignedTo              String?   @map("assigned_to")
  estimatedCompletionDate DateTime? @map("estimated_completion_date") @db.Date
  actualCompletionDate    DateTime? @map("actual_completion_date") @db.Date
  actualCost              Decimal?  @map("actual_cost") @db.Decimal(15, 2)
  createdAt               DateTime  @default(now()) @map("created_at")

  @@map("room_variation_requests")
}

model RoomPpmSchedule {
  id                String    @id @default(cuid())
  roomId            String    @map("room_id")
  ppmType           String    @map("ppm_type")
  frequency         String
  description       String?
  assignedTo        String?   @map("assigned_to")
  contractorId      String?   @map("contractor_id")
  lastPerformedDate DateTime? @map("last_performed_date") @db.Date
  nextDueDate       DateTime? @map("next_due_date") @db.Date
  status            String    @default("Scheduled")
  createdAt         DateTime  @default(now()) @map("created_at")

  @@map("room_ppm_schedules")
}

model Notification {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  title             String
  message           String
  type              String
  relatedEntityType String?  @map("related_entity_type")
  relatedEntityId   String?  @map("related_entity_id")
  isRead            Boolean  @default(false) @map("is_read")
  sentViaEmail      Boolean  @default(false) @map("sent_via_email")
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("notifications")
}

model SystemLog {
  id         String   @id @default(cuid())
  userId     String?  @map("user_id")
  action     String
  entityType String?  @map("entity_type")
  entityId   String?  @map("entity_id")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  details    String?
  timestamp  DateTime @default(now())

  @@map("system_logs")
}

model Meeting {
  id             String            @id @default(cuid())
  title          String
  meetingDate    DateTime          @map("meeting_date")
  location       String?
  organizerId    String            @map("organizer_id")
  minutesContent String?           @map("minutes_content") @db.Text
  status         String            @default("Draft")
  createdAt      DateTime          @default(now()) @map("created_at")
  actionItems    ActionItem[]
  attendees      MeetingAttendee[]

  @@map("meetings")
}

model MeetingAttendee {
  id               String  @id @default(cuid())
  meetingId        String  @map("meeting_id")
  userId           String  @map("user_id")
  attendanceStatus String  @map("attendance_status")
  meeting          Meeting @relation(fields: [meetingId], references: [id])

  @@map("meeting_attendees")
}

model ActionItem {
  id          String    @id @default(cuid())
  meetingId   String    @map("meeting_id")
  description String    @db.Text
  assignedTo  String?   @map("assigned_to")
  dueDate     DateTime? @map("due_date") @db.Date
  status      String    @default("Open")
  priority    String    @default("Medium")
  createdAt   DateTime  @default(now()) @map("created_at")
  meeting     Meeting   @relation(fields: [meetingId], references: [id])

  @@map("action_items")
}

model TrainingPlan {
  id           String    @id @default(cuid())
  trainingName String    @map("training_name")
  trainingType String    @map("training_type")
  scheduleDate DateTime? @map("schedule_date")
  cost         Decimal?  @db.Decimal(10, 2)
  maxAttendees Int?      @map("max_attendees")
  remarks      String?
  status       String    @default("Planned")
  createdBy    String?   @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")

  @@map("training_plans")
}

model TeamAttendance {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  attendanceDate DateTime  @map("attendance_date") @db.Date
  checkInTime    DateTime? @map("check_in_time")
  checkOutTime   DateTime? @map("check_out_time")
  status         String?
  remarks        String?
  createdAt      DateTime  @default(now()) @map("created_at")

  @@map("team_attendance")
}

// IT Asset Handover Management Models
// Add these to the end of your existing schema.prisma

model AssetHandover {
  id                  String                @id @default(cuid())
  handoverNumber      String                @unique @map("handover_number")
  employeeName        String                @map("employee_name")
  employeeEmail       String                @map("employee_email")
  employeeId          String?               @map("employee_id")
  department          String
  position            String?
  manager             String?
  managerEmail        String?               @map("manager_email")
  handoverDate        DateTime              @map("handover_date") @db.Date
  handoverType        String                @map("handover_type") // "New Joiner", "Transfer", "Replacement"
  purpose             String?               // Reason for handover
  notes               String?               @db.Text
  status              String                @default("Draft") // Draft, Pending Approval, Approved, Rejected, Completed
  submittedBy         String                @map("submitted_by")
  submittedAt         DateTime?             @map("submitted_at")
  approvedBy          String?               @map("approved_by")
  approvedAt          DateTime?             @map("approved_at")
  rejectionReason     String?               @map("rejection_reason") @db.Text
  completedAt         DateTime?             @map("completed_at")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  
  // Relationships
  assets              AssetHandoverItem[]
  approvals           HandoverApproval[]
  
  @@map("asset_handovers")
}

model AssetHandoverItem {
  id              String        @id @default(cuid())
  handoverId      String        @map("handover_id")
  assetId         String        @map("asset_id")
  assetTag        String        @map("asset_tag")
  assetType       String        @map("asset_type")
  brand           String?
  model           String?
  serialNumber    String?       @map("serial_number")
  condition       String        @default("Good") // Excellent, Good, Fair, Poor
  accessories     String?       @db.Text // Charger, Mouse, Keyboard, etc.
  notes           String?       @db.Text
  handoverStatus  String        @default("Pending") @map("handover_status") // Pending, Handed Over, Returned
  handedOverAt    DateTime?     @map("handed_over_at")
  returnedAt      DateTime?     @map("returned_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  
  // Relationships
  handover        AssetHandover @relation(fields: [handoverId], references: [id], onDelete: Cascade)
  
  @@map("asset_handover_items")
}

model HandoverApproval {
  id              String        @id @default(cuid())
  handoverId      String        @map("handover_id")
  approverEmail   String        @map("approver_email")
  approverName    String        @map("approver_name")
  approverRole    String        @map("approver_role") // Manager, IT Admin, HR, etc.
  approvalLevel   Int           @map("approval_level") // 1, 2, 3 for multi-level approval
  status          String        @default("Pending") // Pending, Approved, Rejected
  approvedAt      DateTime?     @map("approved_at")
  comments        String?       @db.Text
  emailSentAt     DateTime?     @map("email_sent_at")
  remindersSent   Int           @default(0) @map("reminders_sent")
  createdAt       DateTime      @default(now()) @map("created_at")
  
  // Relationships
  handover        AssetHandover @relation(fields: [handoverId], references: [id], onDelete: Cascade)
  
  @@map("handover_approvals")
}

model HandoverTemplate {
  id              String        @id @default(cuid())
  templateName    String        @map("template_name")
  department      String?       // For department-specific templates
  position        String?       // For position-specific templates
  assetTypes      String        @map("asset_types") @db.Text // JSON array of default asset types
  approvers       String        @map("approvers") @db.Text // JSON array of default approver emails
  isActive        Boolean       @default(true) @map("is_active")
  createdBy       String        @map("created_by")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  @@map("handover_templates")
}